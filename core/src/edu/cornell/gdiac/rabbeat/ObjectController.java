package edu.cornell.gdiac.rabbeat;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.utils.JsonValue;

import edu.cornell.gdiac.assets.AssetDirectory;
import edu.cornell.gdiac.rabbeat.objects.*;

import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import edu.cornell.gdiac.rabbeat.objects.art.ArtObject;
import edu.cornell.gdiac.rabbeat.objects.art.PulsingArtObject;
import edu.cornell.gdiac.rabbeat.objects.art.StretchingArtObject;
import edu.cornell.gdiac.rabbeat.objects.enemies.BatEnemy;
import edu.cornell.gdiac.rabbeat.objects.enemies.BearEnemy;
import edu.cornell.gdiac.rabbeat.objects.enemies.BeeHive;
import edu.cornell.gdiac.rabbeat.objects.enemies.HedgehogEnemy;
import edu.cornell.gdiac.rabbeat.objects.platforms.MovingPlatform;
import edu.cornell.gdiac.rabbeat.objects.platforms.WeightedPlatform;
import edu.cornell.gdiac.rabbeat.ui.GenreUI;
import edu.cornell.gdiac.util.PooledList;

import java.util.ArrayList;
import java.util.HashMap;

public class ObjectController {
    /**
     * The purpose of this class is to instantiate all {@link GameObject}s in our
     * world and keep them in memory.
     * When the world is loaded in from the json, all the objects are created here
     * and placed into
     * an object list. {@link GameController} will use this controller class to
     * update the game logic of
     * each GameObject in the game.
     */
    /** All the objects in the world. */
    public PooledList<GameObject> objects = new PooledList<>();
    /** All objects that are genre-dependent */
    public PooledList<IGenreObject> genreObjects = new PooledList<>();
    /** Queue for adding objects */
    public PooledList<GameObject> addQueue = new PooledList<>();

    /** Reference to the character avatar */
    public Player player;

    /**
     * Physics constants for initialization
     * TODO: constants has some relevant information for game controller and this
     * class does not care
     */
    public JsonValue defaultConstants;
    /** The Json data for the level, generated by Tiled */
    public JsonValue levelJson;

    /** The font for giving messages to the player */
    protected BitmapFont displayFont;

    /** The texture for walls */
    protected TextureRegion blackTile;
    /** The texture for regular platforms */
    protected TextureRegion platformTile;
    /** The texture for regular platform art */
    protected TextureRegion platformTileArt;
    protected TextureRegion longLeft;
    protected TextureRegion longMid;
    protected TextureRegion longRight;
    protected TextureRegion longLeftSquare;
    protected TextureRegion longRightSquare;
    protected TextureRegion longSingle;

    protected TextureRegion laserTile;
    /** Textures for laser stuff*/
    protected TextureRegion laserMiddle;
    protected TextureRegion laserTop;
    protected TextureRegion laserBottom;
    protected TextureRegion laserLeft;
    protected TextureRegion laserRight;
    protected TextureRegion laserHorizontal;

    /** The texture for weighted platforms in Synth mode */
    protected TextureRegion weightedSynth;
    /** The texture for weighted platforms in Jazz mode */
    protected TextureRegion weightedJazz;

    /** The texture for moving platforms in Synth mode */
    protected TextureRegion movingSynth;
    /** The texture for moving platforms in Jazz mode */
    protected TextureRegion movingJazz;

    /** The texture for bullets */
    public TextureRegion bulletTexture;

    /** The default texture for enemies */
    private TextureRegion enemyDefaultTexture;
    /** The texture for the bat enemy */
    private TextureRegion batTexture;
    /** The texture for the echo*/
    public TextureRegion echoTexture;
    /** The atlas for the echo animation*/
    public TextureAtlas echoAtlas;
    /** The echo animation*/
    public Animation<TextureRegion> echoAnimation;
    /** The texture for bees */
    public TextureRegion beeTexture;
    /** The texture for bees */
    private TextureRegion bearTexture;
    /** The texture for beehives */
    private TextureRegion beehiveTexture;
    /** The texture for hedgehogs */
    private TextureRegion hedgehogTexture;
    /** The texture for the exit condition */

    /** The texture for the checkpoint */
    private TextureRegion checkpointTexture;
    /** The texture ofr the goal */
    protected TextureRegion goalTile;
    /** The inactive atlas for a checkpoint */
    protected TextureAtlas checkpointInactiveAtlas;
    /** The inactive animation for a checkpoint */
    protected Animation<TextureRegion> checkpointInactiveAnimation;
    /** The active atlas for a checkpoint */
    protected TextureAtlas checkpointActiveAtlas;
    /** The active animation for a checkpoint */
    protected Animation<TextureRegion> checkpointActiveAnimation;
    /** The rise atlas for a checkpoint */
    protected TextureAtlas checkpointRiseAtlas;
    /** The rise animation for a checkpoint */
    protected Animation<TextureRegion> checkpointRiseAnimation;
    /** The texture for the background*/
    public TextureRegion backgroundTexture;

    /** The texture for the next level text */
    public TextureRegion nextLevelText;

    /** The texture for the level select text */
    public TextureRegion levelSelectText;

    /** The texture for the victory logo */
    public TextureRegion victoryLogo;

    /** The texture for unlocked button 1 */
    public Texture unlockedButton1;

    /** The texture for unlocked button 2 */
    public Texture unlockedButton2;

    /** The texture for unlocked button 3 */
    public Texture unlockedButton3;

    /** The texture for unlocked button 4 */
    public Texture unlockedButton4;

    /** The texture for unlocked button 5 */
    public Texture unlockedButton5;

    /** The texture for unlocked button 6 */
    public Texture unlockedButton6;

    /** The texture for unlocked button 7 */
    public Texture unlockedButton7;

    /** The texture for unlocked button 8 */
    public Texture unlockedButton8;

    /** The texture for unlocked button 9 */
    public Texture unlockedButton9;

    /** The texture for unlocked button 10 */
    public Texture unlockedButton10;

    /** The texture for unlocked button 11 */
    public Texture unlockedButton11;

    /** The texture for unlocked button 12 */
    public Texture unlockedButton12;


    /** The texture for locked button 1 */
    public Texture lockedButton1;

    /** The texture for locked button 2 */
    public Texture lockedButton2;

    /** The texture for locked button 3 */
    public Texture lockedButton3;

    /** The texture for locked button 4 */
    public Texture lockedButton4;

    /** The texture for locked button 5 */
    public Texture lockedButton5;

    /** The texture for locked button 6 */
    public Texture lockedButton6;

    /** The texture for locked button 7 */
    public Texture lockedButton7;

    /** The texture for locked button 8 */
    public Texture lockedButton8;

    /** The texture for locked button 9 */
    public Texture lockedButton9;

    /** The texture for locked button 10 */
    public Texture lockedButton10;

    /** The texture for locked button 11 */
    public Texture lockedButton11;

    /** The texture for locked button 12 */
    public Texture lockedButton12;

    /** The texture for the options button */
    public Texture optionsButton;

    /** The texture for the main menu background */
    public Texture mainMenuBackground;

    /** The texture for the play button */
    public Texture playButton;

    /** The texture for the quit button */
    public Texture quitButton;

    /** The texture for the select */
    public Texture select;

    /** The texture for the background overlay */
    public TextureRegion backgroundOverlayTexture;
    /** The texture for tinting the pause screen overlay background */
    public TextureRegion pauseWhiteOverlayTexture;

    public TextureRegion exitLevelTexture;
    public TextureRegion hoverLowerSoundTexture;
    public TextureRegion hoverUpSoundTexture;
    public TextureRegion indicatorStarTexture;
    public TextureRegion musicTexture;
    public TextureRegion overlayTexture;
    public TextureRegion restartLevelTexture;
    public TextureRegion resumeTexture;
    public TextureRegion SFXTexture;
    public TextureRegion unhoverLowerSoundTexture;
    public TextureRegion unhoverUpSoundTexture;
    public TextureRegion volumeBoxTexture;

    /** The texture for the genre indicator in Synth mode */
    private TextureRegion synthIndicatorTexture;
    /** The texture for the genre indicator in Jazz mode */
    private TextureRegion jazzIndicatorTexture;
    /** The synth genre atlas for the genre indicator */
    public TextureAtlas synthCDAtlas;
    /** The synth animation for the genre indicator */
    private Animation<TextureRegion> synthCDAnimation;
    /** The jazz genre atlas for the genre indicator */
    public TextureAtlas jazzCDAtlas;
    /** The jazz animation for the genre indicator */
    private Animation<TextureRegion> jazzCDAnimation;
    /** The genre indicator UI */
    public GenreUI genreIndicator;

    public TextureRegion blackGradient;

    private HashMap<String, TextureRegion> assets = new HashMap<>();
    //  Tilesets
    private HashMap<Integer, TextureRegion> wallsTileset = new HashMap<>();
    private HashMap<Integer, TextureRegion> rabbeatTileset = new HashMap<>();

    /** Reference to the goalDoor (for collision detection) */
    public BoxGameObject goalDoor;

    /** Reference to all the checkpoints */
    public ArrayList<Checkpoint> checkpoints = new ArrayList<>();
    public float[] firstCheckpoint = new float[2];

    /** The player scale for synth */
    private float playerScale = 1f;

    private TextureRegion synthDefaultTexture;
    private TextureRegion synthJazzTexture;

    // PLAYER ANIMATIONS

    // SYNTH
    /** The synth genre idle atlas for the player */
    public TextureAtlas synthIdleAtlas;
    /** The synth genre idle animation for the player */
    public Animation<TextureRegion> synthIdleAnimation;
    /** The synth genre walking atlas for the player */
    public TextureAtlas synthWalkAtlas;
    /** The synth genre walking animation for the player */
    public Animation<TextureRegion> synthWalkAnimation;
    /** The synth genre jumping atlas for the player */
    public TextureAtlas synthJumpAtlas;
    /** The synth genre jumping animation for the player */
    public Animation<TextureRegion> synthJumpAnimation;
    /** The synth genre fall atlas for the player */
    public TextureAtlas synthFallAtlas;
    /** The synth genre fall animation for the player */
    public Animation<TextureRegion> synthFallAnimation;
    /** The synth genre death atlas for the player */
    public TextureAtlas synthDeathAtlas;
    /** The synth genre death animation for the player */
    public Animation<TextureRegion> synthDeathAnimation;

    // JAZZ
    /** The jazz genre idle atlas for the player */
    public TextureAtlas jazzIdleAtlas;
    /** The jazz genre idle animation for the player */
    public Animation<TextureRegion> jazzIdleAnimation;
    /** The jazz genre walking atlas for the player */
    public TextureAtlas jazzWalkAtlas;
    /** The jazz genre walking animation for the player */
    public Animation<TextureRegion> jazzWalkAnimation;
    /** The jazz genre jumping atlas for the player */
    public TextureAtlas jazzJumpAtlas;
    /** The jazz genre jumping animation for the player */
    public Animation<TextureRegion> jazzJumpAnimation;
    /** The jazz genre fall atlas for the player */
    public TextureAtlas jazzFallAtlas;
    /** The jazz genre fall animation for the player */
    public Animation<TextureRegion> jazzFallAnimation;
    /** The jazz genre death atlas for the player */
    public TextureAtlas jazzDeathAtlas;
    /** The jazz genre death animation for the player */
    public Animation<TextureRegion> jazzDeathAnimation;

    // ENEMY ANIMATIONS
    /** The idle atlas for jazz bullets */
    public TextureAtlas bulletJazzAtlas;
    /** The animation for jazz bullets */
    public Animation<TextureRegion> bulletJazzAnimation;
    /** The idle atlas for synth bullets */
    public TextureAtlas bulletSynthAtlas;
    /** The animation for synth bullets */
    public Animation<TextureRegion> bulletSynthAnimation;
    /** The idle atlas for the bear enemy */
    public TextureAtlas bearIdleAtlas;
    /** The idle animation for the bear enemy */
    public Animation<TextureRegion> bearIdleAnimation;
    /** The anticipation atlas for the bear enemy */
    public TextureAtlas bearAntiAtlas;
    /** The anticipation animation for the bear enemy */
    public Animation<TextureRegion> bearAntiAnimation;
    /** The attack atlas for the bear enemy */
    public TextureAtlas bearAttackAtlas;
    /** The attack animation for the bear enemy */
    public Animation<TextureRegion> bearAttackAnimation;
    /** The idle atlas for the bat enemy */
    public TextureAtlas batIdleAtlas;
    /** The idle animation for the bat enemy */
    public Animation<TextureRegion> batIdleAnimation;
    /** The anticipation atlas for the bat enemy */
    public TextureAtlas batAntiAtlas;
    /** The anticipation animation for the bat enemy */
    public Animation<TextureRegion> batAntiAnimation;
    /** The attack atlas for the bat enemy */
    public TextureAtlas batAttackAtlas;
    /** The attack animation for the bat enemy */
    public Animation<TextureRegion> batAttackAnimation;
    /** The idle atlas for the bee enemy */
    public TextureAtlas beeAttackAtlas;
    /** The idle animation for the bee enemy */
    public Animation<TextureRegion> beeAttackAnimation;
    /** The idle atlas for the beehive */
    public TextureAtlas beehiveIdleAtlas;
    /** The idle animation for the beehive */
    public Animation<TextureRegion> beehiveIdleAnimation;

    /** The idle atlas for the hedgehog enemy */
    public TextureAtlas hedgehogIdleAtlas;
    /** The idle animation for the hedgehog enemy */
    public Animation<TextureRegion> hedgehogIdleAnimation;
    /** The attack atlas for the hedgehog enemy */
    public TextureAtlas hedgehogAttackAtlas;
    /** The attack animation for the hedgehog enemy */
    public Animation<TextureRegion> hedgehogAttackAnimation;

    private float synthSpeed;
    private float jazzSpeed;
    /** The enemy scale for the enemy */
    private float enemyScale = 1f;

    public int tileSize;

    public ArrayList<ArtObject> artObjects = new ArrayList<>();
    /** the default beat list is on the downbeats within 2 measures (beat 1 and beat 5)*/
    public int[] defaultBeatList = { 1, 5 };

    //public GameController gc = GameController.getInstance();
    /**
     * Gather the assets for this controller.
     *
     * This method extracts the asset variables from the given asset directory. It
     * should only be called after the asset directory is completed.
     *
     * @param directory Reference to global asset manager.
     */
    public void gatherAssets(AssetDirectory directory) {
        levelJson = directory.getEntry(GameController.getInstance().getCurrentLevel(), JsonValue.class);
        tileSize = levelJson.getInt("tileheight");

        nextLevelText = new TextureRegion(directory.getEntry("ui:victory:nextLevelText",Texture.class));
        levelSelectText = new TextureRegion(directory.getEntry("ui:victory:levelSelectText",Texture.class));
        victoryLogo = new TextureRegion(directory.getEntry("ui:victory:victoryLogo",Texture.class));

        optionsButton = directory.getEntry("ui:maineMenuScreen:optionsButton",Texture.class);
        playButton = directory.getEntry("ui:maineMenuScreen:playButton",Texture.class);
        quitButton = directory.getEntry("ui:maineMenuScreen:quitButton",Texture.class);
        select = directory.getEntry("ui:maineMenuScreen:select",Texture.class);
        mainMenuBackground = directory.getEntry("ui:maineMenuScreen:mainMenuBackground",Texture.class);

        unlockedButton1 = directory.getEntry("ui:unlockedLevels:unlockedLevel1", Texture.class);
        unlockedButton2 = directory.getEntry("ui:unlockedLevels:unlockedLevel2", Texture.class);
        unlockedButton3 = directory.getEntry("ui:unlockedLevels:unlockedLevel3", Texture.class);
        unlockedButton4 = directory.getEntry("ui:unlockedLevels:unlockedLevel4", Texture.class);
        unlockedButton5 = directory.getEntry("ui:unlockedLevels:unlockedLevel5", Texture.class);
        unlockedButton6 = directory.getEntry("ui:unlockedLevels:unlockedLevel6", Texture.class);
        unlockedButton7 = directory.getEntry("ui:unlockedLevels:unlockedLevel7", Texture.class);
        unlockedButton8 = directory.getEntry("ui:unlockedLevels:unlockedLevel8", Texture.class);
        unlockedButton9 = directory.getEntry("ui:unlockedLevels:unlockedLevel9", Texture.class);
        unlockedButton10 = directory.getEntry("ui:unlockedLevels:unlockedLevel10", Texture.class);
        unlockedButton11 = directory.getEntry("ui:unlockedLevels:unlockedLevel11", Texture.class);
        unlockedButton12 = directory.getEntry("ui:unlockedLevels:unlockedLevel12", Texture.class);

        lockedButton1 = directory.getEntry("ui:lockedLevels:lockedLevel1", Texture.class);
        lockedButton2 = directory.getEntry("ui:lockedLevels:lockedLevel2", Texture.class);
        lockedButton3 = directory.getEntry("ui:lockedLevels:lockedLevel3", Texture.class);
        lockedButton4 = directory.getEntry("ui:lockedLevels:lockedLevel4", Texture.class);
        lockedButton5 = directory.getEntry("ui:lockedLevels:lockedLevel5", Texture.class);
        lockedButton6 = directory.getEntry("ui:lockedLevels:lockedLevel6", Texture.class);
        lockedButton7 = directory.getEntry("ui:lockedLevels:lockedLevel7", Texture.class);
        lockedButton8 = directory.getEntry("ui:lockedLevels:lockedLevel8", Texture.class);
        lockedButton9 = directory.getEntry("ui:lockedLevels:lockedLevel9", Texture.class);
        lockedButton10 = directory.getEntry("ui:lockedLevels:lockedLevel10", Texture.class);
        lockedButton11 = directory.getEntry("ui:lockedLevels:lockedLevel11", Texture.class);
        lockedButton12 = directory.getEntry("ui:lockedLevels:lockedLevel12", Texture.class);

        backgroundTexture = new TextureRegion(directory.getEntry("backgrounds:test-bg",Texture.class));
        backgroundOverlayTexture = new TextureRegion(directory.getEntry("backgrounds:overlay",Texture.class));
        pauseWhiteOverlayTexture = new TextureRegion(directory.getEntry("backgrounds:pauseTint", Texture.class));
        exitLevelTexture = new TextureRegion(directory.getEntry("ui:pause:exitLevel",Texture.class));
        hoverLowerSoundTexture = new TextureRegion(directory.getEntry("ui:pause:hoverLowerSound",Texture.class));
        hoverUpSoundTexture = new TextureRegion(directory.getEntry("ui:pause:hoverUpSound",Texture.class));
        indicatorStarTexture = new TextureRegion(directory.getEntry("ui:pause:indicatorStar",Texture.class));
        musicTexture = new TextureRegion(directory.getEntry("ui:pause:music",Texture.class));
        overlayTexture = new TextureRegion(directory.getEntry("ui:pause:overlay",Texture.class));
        restartLevelTexture = new TextureRegion(directory.getEntry("ui:pause:restartLevel",Texture.class));
        resumeTexture = new TextureRegion(directory.getEntry("ui:pause:resume",Texture.class));
        SFXTexture = new TextureRegion(directory.getEntry("ui:pause:SFX",Texture.class));
        unhoverLowerSoundTexture = new TextureRegion(directory.getEntry("ui:pause:unhoverLowerSound",Texture.class));
        unhoverUpSoundTexture = new TextureRegion(directory.getEntry("ui:pause:unhoverUpSound",Texture.class));
        volumeBoxTexture = new TextureRegion(directory.getEntry("ui:pause:volumeBox",Texture.class));

        enemyDefaultTexture = new TextureRegion(directory.getEntry("player:synth",Texture.class)); //CHANGE FOR ENEMY!
        batTexture = new TextureRegion(directory.getEntry("enemies:bat", Texture.class));
        beeTexture = new TextureRegion(directory.getEntry("enemies:bee", Texture.class));
        bearTexture = new TextureRegion(directory.getEntry("enemies:bear", Texture.class));
        beehiveTexture = new TextureRegion(directory.getEntry("enemies:beehive", Texture.class));
        hedgehogTexture = new TextureRegion(directory.getEntry("enemies:hedgehog", Texture.class));

        // Allocate genre indicator UI
        synthIndicatorTexture = new TextureRegion(directory.getEntry("ui:synthIndicator", Texture.class));
        jazzIndicatorTexture = new TextureRegion(directory.getEntry("ui:jazzIndicator", Texture.class));
        synthCDAtlas = new TextureAtlas(Gdx.files.internal("ui/synthCD.atlas"));
        synthCDAnimation = new Animation<TextureRegion>(1f, synthCDAtlas.findRegions("synthCD"), Animation.PlayMode.LOOP);
        jazzCDAtlas = new TextureAtlas(Gdx.files.internal("ui/jazzCD.atlas"));
        jazzCDAnimation = new Animation<TextureRegion>(1f, jazzCDAtlas.findRegions("jazzCD"), Animation.PlayMode.LOOP);

        // Bullet Animations
        bulletJazzAtlas = new TextureAtlas(Gdx.files.internal("enemies/jazzBullet.atlas"));
        bulletJazzAnimation = new Animation<TextureRegion>(1f, bulletJazzAtlas.findRegions("jazzBullet"), Animation.PlayMode.LOOP);
        bulletSynthAtlas = new TextureAtlas(Gdx.files.internal("enemies/synthBullet.atlas"));
        bulletSynthAnimation = new Animation<TextureRegion>(1f, bulletSynthAtlas.findRegions("synthBullet"), Animation.PlayMode.LOOP);
        blackGradient = new TextureRegion(directory.getEntry("ui:blackGradient", Texture.class));

        defaultConstants = directory.getEntry("defaultConstants", JsonValue.class);
        synthSpeed = defaultConstants.get("player").get("max_speed").getFloat("synth");
        jazzSpeed = defaultConstants.get("player").get("max_speed").getFloat("jazz");
        synthDefaultTexture = new TextureRegion(directory.getEntry("player:synth", Texture.class));
        synthJazzTexture = new TextureRegion(directory.getEntry("player:synth-jazz", Texture.class));

        // Allocating player animations
        // Synth
        // Note: For animations, frame durations must be 1 for AnimationSync to work
        synthIdleAtlas = new TextureAtlas(Gdx.files.internal("player/synthIdle.atlas"));
        synthIdleAnimation = new Animation<TextureRegion>(1f, synthIdleAtlas.findRegions("synthIdle"), Animation.PlayMode.LOOP);

        synthWalkAtlas = new TextureAtlas(Gdx.files.internal("player/synthWalk.atlas"));
        synthWalkAnimation = new Animation<TextureRegion>(1f, synthWalkAtlas.findRegions("synthWalk"), Animation.PlayMode.LOOP);

        synthJumpAtlas = new TextureAtlas(Gdx.files.internal("player/synthJump.atlas"));
        synthJumpAnimation = new Animation<TextureRegion>(1f, synthJumpAtlas.findRegions("synthJump"), Animation.PlayMode.NORMAL);

        synthFallAtlas = new TextureAtlas(Gdx.files.internal("player/synthFall.atlas"));
        synthFallAnimation = new Animation<TextureRegion>(1f, synthFallAtlas.findRegions("synthFall"), Animation.PlayMode.LOOP);

        synthDeathAtlas = new TextureAtlas(Gdx.files.internal("player/synthDeath.atlas"));
        synthDeathAnimation = new Animation<TextureRegion>(1f, synthDeathAtlas.findRegions("synthDeath"), Animation.PlayMode.NORMAL);

        // Jazz
        jazzIdleAtlas = new TextureAtlas(Gdx.files.internal("player/jazzIdle.atlas"));
        jazzIdleAnimation = new Animation<TextureRegion>(1f, jazzIdleAtlas.findRegions("jazzIdle"), Animation.PlayMode.LOOP);

        jazzWalkAtlas = new TextureAtlas(Gdx.files.internal("player/jazzWalk.atlas"));
        jazzWalkAnimation = new Animation<TextureRegion>(1f, jazzWalkAtlas.findRegions("jazzWalk"), Animation.PlayMode.LOOP);

        jazzJumpAtlas = new TextureAtlas(Gdx.files.internal("player/jazzJump.atlas"));
        jazzJumpAnimation = new Animation<TextureRegion>(1f, jazzJumpAtlas.findRegions("jazzJump"), Animation.PlayMode.NORMAL);

        jazzFallAtlas = new TextureAtlas(Gdx.files.internal("player/jazzFall.atlas"));
        jazzFallAnimation = new Animation<TextureRegion>(1f, jazzFallAtlas.findRegions("jazzFall"), Animation.PlayMode.LOOP);

        jazzDeathAtlas = new TextureAtlas(Gdx.files.internal("player/jazzDeath.atlas"));
        jazzDeathAnimation = new Animation<TextureRegion>(1f, jazzDeathAtlas.findRegions("jazzDeath"), Animation.PlayMode.NORMAL);

        // Allocating enemy animations
        // Bear
        bearIdleAtlas = new TextureAtlas(Gdx.files.internal("enemies/bearIdle.atlas"));
        bearIdleAnimation = new Animation<TextureRegion>(1f, bearIdleAtlas.findRegions("bearIdle"), Animation.PlayMode.LOOP);
        bearAntiAtlas = new TextureAtlas(Gdx.files.internal("enemies/bearAnti.atlas"));
        bearAntiAnimation = new Animation<TextureRegion>(1f, bearAntiAtlas.findRegions("bearAnti"), Animation.PlayMode.LOOP);
        bearAttackAtlas = new TextureAtlas(Gdx.files.internal("enemies/bearAttack.atlas"));
        bearAttackAnimation = new Animation<TextureRegion>(1f, bearAttackAtlas.findRegions("bearAttack"), Animation.PlayMode.LOOP);

        //  Bat
        batIdleAtlas = new TextureAtlas(Gdx.files.internal("enemies/batIdle.atlas"));
        batIdleAnimation = new Animation<TextureRegion>(1f, batIdleAtlas.findRegions("batIdle"), Animation.PlayMode.LOOP);
        batAntiAtlas = new TextureAtlas(Gdx.files.internal("enemies/batAnti.atlas"));
        batAntiAnimation = new Animation<TextureRegion>(1f, batAntiAtlas.findRegions("batAnti"), Animation.PlayMode.LOOP);
        batAttackAtlas = new TextureAtlas(Gdx.files.internal("enemies/batAttack.atlas"));
        batAttackAnimation = new Animation<TextureRegion>(1f, batAttackAtlas.findRegions("batAttack"), Animation.PlayMode.LOOP);
        echoAtlas = new TextureAtlas(Gdx.files.internal("atlas/echo.atlas"));
        echoAnimation = new Animation<TextureRegion>(1f, echoAtlas.findRegions("echo"));
        echoTexture = new TextureRegion(directory.getEntry("enemies:echoStill", Texture.class));

        // Bee
        beeAttackAtlas = new TextureAtlas(Gdx.files.internal("enemies/beeAttack.atlas"));
        beeAttackAnimation = new Animation<TextureRegion>(0.25f, beeAttackAtlas.findRegions("beeAttack"),
                Animation.PlayMode.LOOP);

        beehiveIdleAtlas = new TextureAtlas(Gdx.files.internal("enemies/beehiveIdle.atlas"));
        beehiveIdleAnimation = new Animation<TextureRegion>(1, beehiveIdleAtlas.findRegions("beehiveIdle"),
                Animation.PlayMode.LOOP);
        // Hedgehog
        hedgehogIdleAtlas = new TextureAtlas(Gdx.files.internal("enemies/bearIdle.atlas"));
        hedgehogIdleAnimation = new Animation<TextureRegion>(5/3f, bearIdleAtlas.findRegions("bearIdle"), Animation.PlayMode.LOOP);
        hedgehogAttackAtlas = new TextureAtlas(Gdx.files.internal("enemies/hedgehogAttack.atlas"));
        hedgehogAttackAnimation = new Animation<TextureRegion>(1.5f, hedgehogAttackAtlas.findRegions("hedgehogAttack"), Animation.PlayMode.LOOP);


        // Allocate the tiles
        blackTile = new TextureRegion(directory.getEntry( "world:platforms:blackTile", Texture.class ));
        platformTile = new TextureRegion(directory.getEntry( "world:platforms:platform", Texture.class ));
        platformTileArt = new TextureRegion(directory.getEntry( "world:platforms:platformArt", Texture.class ));
        longLeft = new TextureRegion(directory.getEntry("world:platforms:longPlatform:left", Texture.class ));
        longMid = new TextureRegion(directory.getEntry( "world:platforms:longPlatform:mid", Texture.class ));
        longRight = new TextureRegion(directory.getEntry( "world:platforms:longPlatform:right", Texture.class ));
        longLeftSquare = new TextureRegion(directory.getEntry( "world:platforms:longPlatform:leftSquare", Texture.class ));
        longRightSquare = new TextureRegion(directory.getEntry( "world:platforms:longPlatform:rightSquare", Texture.class ));
        longSingle = new TextureRegion(directory.getEntry( "world:platforms:longPlatform:single", Texture.class ));
        laserTile = new TextureRegion(directory.getEntry("world:laser", Texture.class));
        laserMiddle = new TextureRegion(directory.getEntry("world:laserMiddle", Texture.class));
        laserTop = new TextureRegion(directory.getEntry("world:laserTop", Texture.class));
        laserBottom = new TextureRegion(directory.getEntry("world:laserBottom", Texture.class));
        laserLeft = new TextureRegion(directory.getEntry("world:laserLeft", Texture.class));
        laserRight = new TextureRegion(directory.getEntry("world:laserRight", Texture.class));
        laserHorizontal = new TextureRegion(directory.getEntry("world:laserHorizontal", Texture.class));

        weightedSynth = new TextureRegion((directory.getEntry("world:platforms:weightedSynth", Texture.class)));
        weightedJazz = new TextureRegion((directory.getEntry("world:platforms:weightedJazz", Texture.class)));

        movingSynth = new TextureRegion((directory.getEntry("world:platforms:movingSynth", Texture.class)));
        movingJazz = new TextureRegion((directory.getEntry("world:platforms:movingJazz", Texture.class)));

        assets.put("bearpod1", new TextureRegion(directory.getEntry("world:pods:bearpod1", Texture.class)));
        assets.put("bearpod2", new TextureRegion(directory.getEntry("world:pods:bearpod2", Texture.class)));
        assets.put("bgpod1", new TextureRegion(directory.getEntry("world:pods:bgpod1", Texture.class)));
        assets.put("bgpod2", new TextureRegion(directory.getEntry("world:pods:bgpod2", Texture.class)));
        assets.put("dolpod1", new TextureRegion(directory.getEntry("world:pods:dolpod1", Texture.class)));
        assets.put("dolpod2", new TextureRegion(directory.getEntry("world:pods:dolpod2", Texture.class)));
        assets.put("octpod1", new TextureRegion(directory.getEntry("world:pods:octpod1", Texture.class)));
        assets.put("emptypod4", new TextureRegion(directory.getEntry("world:pods:emptypod4", Texture.class)));
        assets.put("wolfpod1", new TextureRegion(directory.getEntry("world:pods:wolfpod1", Texture.class)));
        assets.put("shelf1", new TextureRegion(directory.getEntry("world:shelves:shelf1", Texture.class)));
        assets.put("shelf2", new TextureRegion(directory.getEntry("world:shelves:shelf2", Texture.class)));
        assets.put("shelf3", new TextureRegion(directory.getEntry("world:shelves:shelf3", Texture.class)));
        assets.put("shelf4", new TextureRegion(directory.getEntry("world:shelves:shelf4", Texture.class)));
        assets.put("shelf5", new TextureRegion(directory.getEntry("world:shelves:shelf5", Texture.class)));
        assets.put("light", new TextureRegion(directory.getEntry("world:other:light", Texture.class)));
        assets.put("pipeposter", new TextureRegion(directory.getEntry("world:pipes:pipeposter", Texture.class)));
        assets.put("piperight", new TextureRegion(directory.getEntry("world:pipes:piperight", Texture.class)));
        assets.put("piperightskinny",
                new TextureRegion(directory.getEntry("world:pipes:piperightskinny", Texture.class)));
        assets.put("pipestraight", new TextureRegion(directory.getEntry("world:pipes:pipestraight", Texture.class)));
        assets.put("pipestraightskinny",
                new TextureRegion(directory.getEntry("world:pipes:pipestraightskinny", Texture.class)));
        assets.put("pipeleftskinny",
                new TextureRegion(directory.getEntry("world:pipes:pipeleftskinny", Texture.class)));
        assets.put("bgpipe", new TextureRegion(directory.getEntry("world:pipes:bgpipe", Texture.class)));
        assets.put("bigpipe", new TextureRegion(directory.getEntry("world:pipes:bigpipe", Texture.class)));
        assets.put("bigpipetv", new TextureRegion(directory.getEntry("world:pipes:bigpipetv", Texture.class)));
        assets.put("bigwire", new TextureRegion(directory.getEntry("world:wires:bigwire", Texture.class)));
        assets.put("wires1", new TextureRegion(directory.getEntry("world:wires:wires1", Texture.class)));
        assets.put("wires2", new TextureRegion(directory.getEntry("world:wires:wires2", Texture.class)));
        assets.put("emoji_0", new TextureRegion(directory.getEntry("world:graffiti:emoji_0", Texture.class)));
        assets.put("emoji_1", new TextureRegion(directory.getEntry("world:graffiti:emoji_1", Texture.class)));
        assets.put("emoji_2", new TextureRegion(directory.getEntry("world:graffiti:emoji_2", Texture.class)));
        assets.put("graffiti_0", new TextureRegion(directory.getEntry("world:graffiti:graffiti_0", Texture.class)));
        assets.put("graffiti_1", new TextureRegion(directory.getEntry("world:graffiti:graffiti_1", Texture.class)));
        assets.put("graffiti_2", new TextureRegion(directory.getEntry("world:graffiti:graffiti_2", Texture.class)));
        assets.put("graffiti_3", new TextureRegion(directory.getEntry("world:graffiti:graffiti_3", Texture.class)));
        assets.put("caution_0", new TextureRegion(directory.getEntry("world:graffiti:caution_0", Texture.class)));
        assets.put("tv", new TextureRegion(directory.getEntry("world:other:tv", Texture.class)));
        assets.put("cam_0", new TextureRegion(directory.getEntry("world:other:cam_0", Texture.class)));
        assets.put("cam_1", new TextureRegion(directory.getEntry("world:other:cam_1", Texture.class)));
        assets.put("cam_2", new TextureRegion(directory.getEntry("world:other:cam_2", Texture.class)));
        assets.put("fan_0", new TextureRegion(directory.getEntry("world:other:fan_0", Texture.class)));
        assets.put("fan_1", new TextureRegion(directory.getEntry("world:other:fan_1", Texture.class)));
        assets.put("windows_0", new TextureRegion(directory.getEntry("world:other:windows_0", Texture.class)));
        assets.put("windows_1", new TextureRegion(directory.getEntry("world:other:windows_1", Texture.class)));
        assets.put("windows_2", new TextureRegion(directory.getEntry("world:other:windows_2", Texture.class)));
        assets.put("ceilingCamera", new TextureRegion(directory.getEntry("world:other:ceilingCamera", Texture.class)));
        assets.put("trash_0", new TextureRegion(directory.getEntry("world:other:trash_0", Texture.class)));
        assets.put("trash_1", new TextureRegion(directory.getEntry("world:other:trash_1", Texture.class)));
        assets.put("trash_2", new TextureRegion(directory.getEntry("world:other:trash_2", Texture.class)));
        assets.put("trash_3", new TextureRegion(directory.getEntry("world:other:trash_3", Texture.class)));
        assets.put("decal_0", new TextureRegion(directory.getEntry("world:decals:decal_0", Texture.class)));
        assets.put("decal_1", new TextureRegion(directory.getEntry("world:decals:decal_1", Texture.class)));
        assets.put("decal_2", new TextureRegion(directory.getEntry("world:decals:decal_2", Texture.class)));
        assets.put("decal_3", new TextureRegion(directory.getEntry("world:decals:decal_3", Texture.class)));
        assets.put("decal_4", new TextureRegion(directory.getEntry("world:decals:decal_4", Texture.class)));
        assets.put("decal_5", new TextureRegion(directory.getEntry("world:decals:decal_5", Texture.class)));
        assets.put("decal_6", new TextureRegion(directory.getEntry("world:decals:decal_6", Texture.class)));
        assets.put("decal_7", new TextureRegion(directory.getEntry("world:decals:decal_7", Texture.class)));
        assets.put("decal_8", new TextureRegion(directory.getEntry("world:decals:decal_8", Texture.class)));
        assets.put("decal_9", new TextureRegion(directory.getEntry("world:decals:decal_9", Texture.class)));
        assets.put("decal_10", new TextureRegion(directory.getEntry("world:decals:decal_10", Texture.class)));
        assets.put("crack_0", new TextureRegion(directory.getEntry("world:cracks:crack_0", Texture.class)));
        assets.put("crack_1", new TextureRegion(directory.getEntry("world:cracks:crack_1", Texture.class)));
        assets.put("crack_2", new TextureRegion(directory.getEntry("world:cracks:crack_2", Texture.class)));
        assets.put("crack_3", new TextureRegion(directory.getEntry("world:cracks:crack_3", Texture.class)));
        assets.put("crack_4", new TextureRegion(directory.getEntry("world:cracks:crack_4", Texture.class)));
        assets.put("crack_5", new TextureRegion(directory.getEntry("world:cracks:crack_5", Texture.class)));
        assets.put("crack_6", new TextureRegion(directory.getEntry("world:cracks:crack_6", Texture.class)));
        assets.put("crack_7", new TextureRegion(directory.getEntry("world:cracks:crack_7", Texture.class)));
        assets.put("crack_8", new TextureRegion(directory.getEntry("world:cracks:crack_8", Texture.class)));
        assets.put("spot_0", new TextureRegion(directory.getEntry("world:spots:spot_0", Texture.class)));
        assets.put("spot_1", new TextureRegion(directory.getEntry("world:spots:spot_1", Texture.class)));
        assets.put("spot_2", new TextureRegion(directory.getEntry("world:spots:spot_2", Texture.class)));
        assets.put("spot_3", new TextureRegion(directory.getEntry("world:spots:spot_3", Texture.class)));
        assets.put("spot_4", new TextureRegion(directory.getEntry("world:spots:spot_4", Texture.class)));
        assets.put("spot_5", new TextureRegion(directory.getEntry("world:spots:spot_5", Texture.class)));
        assets.put("spot_6", new TextureRegion(directory.getEntry("world:spots:spot_6", Texture.class)));
        assets.put("spot_7", new TextureRegion(directory.getEntry("world:spots:spot_7", Texture.class)));
        assets.put("texture_0", new TextureRegion(directory.getEntry("world:spots:texture_0", Texture.class)));
        assets.put("texture_1", new TextureRegion(directory.getEntry("world:spots:texture_1", Texture.class)));
        assets.put("laserOverlay", new TextureRegion(directory.getEntry("world:laserOverlay", Texture.class)));
        assets.put("laserGlow", new TextureRegion(directory.getEntry("world:laserGlow", Texture.class)));

        assets.put("pole_0", new TextureRegion(directory.getEntry("world:signs:pole_0", Texture.class)));
        assets.put("pole_1", new TextureRegion(directory.getEntry("world:signs:pole_1", Texture.class)));
        assets.put("pole_2", new TextureRegion(directory.getEntry("world:signs:pole_2", Texture.class)));
        assets.put("stop_0", new TextureRegion(directory.getEntry("world:signs:stop_0", Texture.class)));
        assets.put("stop_1", new TextureRegion(directory.getEntry("world:signs:stop_1", Texture.class)));
        assets.put("stop_2", new TextureRegion(directory.getEntry("world:signs:stop_2", Texture.class)));
        assets.put("stop_3", new TextureRegion(directory.getEntry("world:signs:stop_3", Texture.class)));
        assets.put("yield_0", new TextureRegion(directory.getEntry("world:signs:yield_0", Texture.class)));
        assets.put("yield_1", new TextureRegion(directory.getEntry("world:signs:yield_1", Texture.class)));
        assets.put("dead_0", new TextureRegion(directory.getEntry("world:signs:dead_0", Texture.class)));
        assets.put("dead_1", new TextureRegion(directory.getEntry("world:signs:dead_1", Texture.class)));
        assets.put("dead_2", new TextureRegion(directory.getEntry("world:signs:dead_2", Texture.class)));
        assets.put("exit_0", new TextureRegion(directory.getEntry("world:signs:exit_0", Texture.class)));

        wallsTileset.put(0, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:0", Texture.class)));
        wallsTileset.put(1, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:1", Texture.class)));
        wallsTileset.put(2, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:2", Texture.class)));
        wallsTileset.put(3, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:3", Texture.class)));
        wallsTileset.put(4, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:4", Texture.class)));
        wallsTileset.put(5, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:5", Texture.class)));
        wallsTileset.put(6, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:6", Texture.class)));
        wallsTileset.put(7, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:7", Texture.class)));
        wallsTileset.put(8, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:8", Texture.class)));
        wallsTileset.put(9, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:9", Texture.class)));
        wallsTileset.put(10, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:10", Texture.class)));
        wallsTileset.put(11, new TextureRegion(directory.getEntry("world:tilesets:wallsTileset:11", Texture.class)));

        rabbeatTileset.put(0, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:0", Texture.class)));
        rabbeatTileset.put(1, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:1", Texture.class)));
        rabbeatTileset.put(2, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:2", Texture.class)));
        rabbeatTileset.put(3, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:3", Texture.class)));
        rabbeatTileset.put(4, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:4", Texture.class)));
        rabbeatTileset.put(5, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:5", Texture.class)));
        rabbeatTileset.put(6, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:6", Texture.class)));
        rabbeatTileset.put(7, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:7", Texture.class)));
        rabbeatTileset.put(8, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:8", Texture.class)));
        rabbeatTileset.put(9, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:9", Texture.class)));
        rabbeatTileset.put(10, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:10", Texture.class)));
        rabbeatTileset.put(11, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:11", Texture.class)));
        rabbeatTileset.put(12, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:12", Texture.class)));
        rabbeatTileset.put(13, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:13", Texture.class)));
        rabbeatTileset.put(14, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:14", Texture.class)));
        rabbeatTileset.put(15, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:15", Texture.class)));
        rabbeatTileset.put(16, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:16", Texture.class)));
        rabbeatTileset.put(17, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:17", Texture.class)));
        rabbeatTileset.put(18, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:18", Texture.class)));
        rabbeatTileset.put(19, new TextureRegion(directory.getEntry("world:tilesets:rabbeatTileset:19", Texture.class)));

        bulletTexture = new TextureRegion(directory.getEntry("world:bullet", Texture.class));
        checkpointTexture = new TextureRegion(directory.getEntry("world:checkpoints:checkpointInactive", Texture.class));
        goalTile  = new TextureRegion(directory.getEntry( "world:goal", Texture.class ));
        displayFont = directory.getEntry( "fonts:retro" ,BitmapFont.class);

        // Checkpoint
        checkpointInactiveAtlas = new TextureAtlas(Gdx.files.internal("world/checkpoints/checkpointInactive.atlas"));
        checkpointInactiveAnimation = new Animation<TextureRegion>(1f, checkpointInactiveAtlas.findRegions("checkpointInactive"), Animation.PlayMode.LOOP);
        checkpointActiveAtlas = new TextureAtlas(Gdx.files.internal("world/checkpoints/checkpointActive.atlas"));
        checkpointActiveAnimation = new Animation<TextureRegion>(1f, checkpointActiveAtlas.findRegions("checkpointActive"), Animation.PlayMode.LOOP);
        checkpointRiseAtlas = new TextureAtlas(Gdx.files.internal("world/checkpoints/checkpointRise.atlas"));
        checkpointRiseAnimation = new Animation<TextureRegion>(1f, checkpointRiseAtlas.findRegions("checkpointRise"), Animation.PlayMode.LOOP);
    }


    /**
     * Populates all objects into the game.
     *
     * @param genre The genre the world is currently in
     * @param scale The draw scale
     */
    public void populateObjects(Genre genre, Vector2 scale) {
        // Populate in-game UI elements
        createGUI(genre);

        if (levelJson.has("layers")) {

            // Get level height
            int levelHeight = levelJson.getInt("height");

            //  Process layers
            for (JsonValue layer : levelJson.get("layers")) {
                String layerName = layer.getString("name", "");
                switch (layerName) {
                    case "background":
                        // TODO: change background image depending on tiled info – may do this when we
                        // have more levels
                        break;
                    case "walls":
                        int[] data = layer.get("data").asIntArray();
                        int width = layer.getInt("width");
                        int height = layer.getInt("height");
                        for (int i = 0; i < data.length; i++) {
                            int tileTypeID = data[i];
                            // tileTypeID == 0 means there is no tile there
                            if (tileTypeID != 0) {
                                // Get x and y coordinates from where it is in the array
                                int x = i % width;
                                int y = height - (i / width) - 1;

                                Tileset tileset = getTileset(tileTypeID);

                                createWall(scale, x, y, tileTypeID-tileset.firstGID, tileSize, tileset.tilesetSource);
                            }
                        }
                        break;
                    case "weightedPlatforms":
                        // Sort the synth/jazz weighted platform coordinates into arrays corresponding
                        // to the num value
                        // The index is used to identify a specific platform's synth and jazz position
                        // and its speed
                        float[][] synthCoord = new float[layer.get("objects").size][2];
                        float[][] jazzCoord = new float[layer.get("objects").size][2];
                        int[] wpPlatformInterval = new int[layer.get("objects").size];
                        int[] wpWait = new int[layer.get("objects").size];
                        int[] wpMove = new int[layer.get("objects").size];
                        Vector2[] wpDimensions = new Vector2[layer.get("objects").size];
                        for (JsonValue wp : layer.get("objects")) {
                            int num = 0;
                            String genrePlat = "";
                            int platformInterval = 1;
                            int waitTime = 1;
                            int moveTime = 0;
                            for (JsonValue prop : wp.get("properties")) {
                                switch (prop.getString("name")) {
                                    case "num":
                                        num = prop.getInt("value");
                                        break;
                                    case "genre":
                                        genrePlat = prop.getString("value");
                                        break;
                                    case "platformInterval":
                                        platformInterval = prop.getInt("value");
                                        break;
                                    case "moveTime":
                                        moveTime= prop.getInt("value");

                                        break;
                                    case "waitTIme":
                                        waitTime = prop.getInt("value");
                                        break;
                                }
                            }
                            switch (genrePlat) {
                                case "synth":
                                    synthCoord[num] = new float[] { wp.getFloat("x"), wp.getFloat("y") };
                                    break;
                                case "jazz":
                                    jazzCoord[num] = new float[] { wp.getFloat("x"), wp.getFloat("y") };
                                    break;
                            }
                            wpPlatformInterval[num] = platformInterval;
                            wpMove[num] = moveTime;
                            wpWait[num] = waitTime;
                            wpDimensions[num] = new Vector2(wp.getFloat("width"), wp.getFloat("height"));
                        }
                        //  Now actually create weighted platforms using synthCoord, jazzCoord, wpSpeed
                        for (int i=0; i<layer.get("objects").size/2; i++){
                            createWeightedPlatform(scale, synthCoord[i], jazzCoord[i],
                                    wpPlatformInterval[i], wpMove[i], wpWait[i], wpDimensions[i],
                                    levelHeight, tileSize, genre);
                        }
                        break;
                    case "movingPlatforms":
                        HashMap<Integer, Vector2[]> positionNodes = new HashMap<>();
                        HashMap<Integer, Integer> mpWait = new HashMap<>();
                        HashMap<Integer, Integer> mpMove = new HashMap<>();
                        HashMap<Integer, Vector2> dimensions = new HashMap<>();
                        for (JsonValue mp : layer.get("objects")) {
                            int num = 0;
                            int pos = 0;
                            int wait = 1;
                            int move = 0;
                            int totalPos = 1; // number of positions in this moving platform
                            for (JsonValue prop : mp.get("properties")) {
                                switch (prop.getString("name")) {
                                    case "num":
                                        num = prop.getInt("value");
                                        break;
                                    case "pos":
                                        pos = prop.getInt("value");
                                        break;
                                    case "waitTime":
                                        wait = prop.getInt("value");
                                        break;
                                    case "moveTime":
                                        move = prop.getInt("value");
                                        break;
                                    case "totalPos":
                                        totalPos = prop.getInt("value");
                                        break;
                                }
                            }
                            // Store coordinates
                            final int numOfNodes = totalPos; // need to be final to be used in computeIfAbsent
                            positionNodes.computeIfAbsent(num, key -> new Vector2[numOfNodes]);
                            Vector2 coord = new Vector2(mp.getFloat("x"), mp.getFloat("y"));
                            Vector2 dim = new Vector2(mp.getFloat("width"), mp.getFloat("height"));
                            positionNodes.get(num)[pos] = coord;

                            // Store nodewaitTime
                            mpWait.put(num, wait);
                            // store Movespeed
                            mpMove.put(num, move);
                            //  Store dimensions
                            dimensions.put(num, dim);
                        }
                        //  Now actually create moving platforms
                        for (int i=0; i<positionNodes.size(); i++){
                            createMovingPlatform(scale, positionNodes.get(i),
                                    mpWait.get(i), mpMove.get(i), dimensions.get(i),
                                    levelHeight, tileSize);
                        }
                        break;
                    case "platforms":
                        for (JsonValue platform : layer.get("objects")) {
                            float x = platform.getFloat("x");
                            float y = platform.getFloat("y");
                            Vector2 dim = new Vector2(platform.getFloat("width"), platform.getFloat("height"));
                            String align = "";
                            boolean lethal = false;
                            if (platform.getString("type").equals( "laser")){
                                lethal = true;
                            }
                            if (platform.get("properties")!= null){
                                for (JsonValue prop : platform.get("properties")) {
                                    if (prop.getString("name").equals("align")) {
                                        align = prop.getString("value");
                                    }
                                }
                            }

                            createPlatform(scale, align, x, y, dim, levelHeight, tileSize, lethal);
                        }
                        break;
                    case "platformArt":
                        for (JsonValue a : layer.get("objects")) {
                            float x = a.getFloat("x");
                            float y = a.getFloat("y");
                            Vector2 dim = new Vector2(a.getFloat("width"), a.getFloat("height"));
                            createPlatformArt(scale, a.getString("type"), x, y, dim, levelHeight, tileSize);
                        }
                        break;
                    case "player":
                        if (layer.get("objects").size > 0) {
                            JsonValue player = layer.get("objects").get(0);
                            float x = player.getInt("x");
                            float y = player.getInt("y");
                            Vector2 dim = new Vector2(player.getFloat("width"), player.getFloat("height"));
                            createPlayer(scale, x, y, dim, levelHeight, tileSize, genre);
                        }
                        break;
                    case "enemies":
                        // TODO: Read the beatlist actions from Tiled
                        for (JsonValue enemy : layer.get("objects")) {
                            String enemyType = enemy.getString("type");
                            String beatListString = "";
                            int color = 0;
                            boolean faceRight = false;
                            float beeBeat = 0.0f;
                            for (JsonValue prop : enemy.get("properties")) {
                                if (prop.getString("name").equals("beatList")) {
                                    beatListString = prop.getString("value");
                                }
                                if (prop.getString("name").equals("isRight")){
                                    faceRight = prop.getBoolean("value");
                                }
                                if (prop.getString("name").equals("beeBeat")){
                                    beeBeat = prop.getFloat("value");
                                }
                            }
                            switch (enemyType) {
                                case "Bear":
                                    float x = enemy.getFloat("x");
                                    float y = enemy.getFloat("y");
                                    Vector2 dim = new Vector2(enemy.getFloat("width"), enemy.getFloat("height"));
                                    createEnemyBear(scale, x, y, dim, levelHeight,
                                            tileSize, convertTiledbeatList(beatListString), genre);
                                    break;
                                case "Beehive":
                                    x = enemy.getFloat("x");
                                    y = enemy.getFloat("y");
                                    dim = new Vector2(enemy.getFloat("width"), enemy.getFloat("height"));
                                    createEnemyBeehive(scale, x, y, dim, levelHeight, tileSize,
                                            convertTiledbeatList(beatListString), faceRight, beeBeat, genre);
                                    break;
                                case "Hedgehog":
                                    x = enemy.getFloat("x");
                                    y = enemy.getFloat("y");
                                    dim = new Vector2(enemy.getFloat("width"), enemy.getFloat("height"));
                                    int rollingDistance = 0;
                                    for (JsonValue prop : enemy.get("properties")) {
                                        if (prop.getString("name").equals("rollingDistance")) {
                                            rollingDistance = prop.getInt("value");
                                        }
                                    }
                                    createEnemyHedgehog(scale, x, y, dim, rollingDistance,
                                            levelHeight, tileSize,
                                            convertTiledbeatList(beatListString), genre);
                                    break;
                                case "Bat":
                                    x = enemy.getFloat("x");
                                    y = enemy.getFloat("y");
                                    dim = new Vector2(enemy.getFloat("width"), enemy.getFloat("height"));
                                    createEnemyBat(scale, x, y, dim, levelHeight, tileSize,
                                            convertTiledbeatList(beatListString), genre);
                                    break;
                            }
                        }
                        break;
                    case "checkpoints":
                        for (JsonValue checkpoint : layer.get("objects")) {
                            float x = checkpoint.getFloat("x");
                            float y = checkpoint.getFloat("y");
                            Vector2 dim = new Vector2(checkpoint.getFloat("width"), checkpoint.getFloat("height"));
                            int id = 0;
                            for (JsonValue prop : checkpoint.get("properties")) {
                                if (prop.getString("name").equals("num")) {
                                    id = prop.getInt("value");
                                }
                            }
                            createCheckpoint(scale, x, y, dim, id, levelHeight, tileSize);
                        }
                        break;
                    case "goal":
                        if (layer.get("objects").size > 0) {
                            JsonValue goal = layer.get("objects").get(0);
                            float x = goal.getInt("x");
                            float y = goal.getInt("y");
                            Vector2 dim = new Vector2(goal.getFloat("width"), goal.getFloat("height"));
                            createGoal(scale, x, y, dim, levelHeight, tileSize);
                        }
                        break;
                    case "wallArt":
                        for (JsonValue a : layer.get("objects")) {
                            float x = a.getFloat("x");
                            float y = a.getFloat("y");
                            Vector2 dim = new Vector2(a.getFloat("width"), a.getFloat("height"));
                            String assetName = "";
                            if (a.get("properties")!=null) {
                                for (JsonValue prop : a.get("properties")) {
                                    if (prop.getString("name").equals("assetName")) {
                                        assetName = prop.getString("value");
                                    }
                                }
                            }
                            createGroundArt(scale, assetName, x, y, dim, levelHeight, tileSize, "foreground",
                                    a);
                        }
                        break;
                    case "decals":
                        for (JsonValue a : layer.get("objects")) {
                            float x = a.getFloat("x");
                            float y = a.getFloat("y");
                            Vector2 dim = new Vector2(a.getFloat("width"), a.getFloat("height"));
                            String assetName = "";
                            if (a.get("properties")!=null) {
                                for (JsonValue prop : a.get("properties")) {
                                    if (prop.getString("name").equals("assetName")) {
                                        assetName = prop.getString("value");
                                    }
                                }
                            }
                            createGroundArt(scale, assetName, x, y, dim, levelHeight, tileSize, "background",
                                    a);
                        }
                        break;
                    case "backgroundArt": {
                        for (JsonValue a : layer.get("objects")) {
                            float x = a.getFloat("x");
                            float y = a.getFloat("y");
                            Vector2 dim = new Vector2(a.getFloat("width"), a.getFloat("height"));
                            String assetName = "";
                            if (a.get("properties") != null) {
                                for (JsonValue prop : a.get("properties")) {
                                    if (prop.getString("name").equals("assetName")) {
                                        assetName = prop.getString("value");
                                    }
                                }
                            }
                            createGroundArt(scale, assetName, x, y, dim, levelHeight, tileSize,
                                    "background",
                                    a);
                        }
                    }
                        break;
                }

            }
        }
    }

    /**
     * Convert Tiled coordinates to world coordinates.
     *
     * @param x           The x Tiled coordinate.
     * @param y           The y Tiled coordinate.
     * @param levelHeight The height of the screen (in number of tiles).
     * @param tileSize    The size of the tiles (in pixels).
     * @return A Vector2 object where the x and y attributes are the converted world
     *         coordinates.
     */
    private Vector2 convertTiledCoord(float x, float y, float width, float height, int levelHeight, int tileSize){
        x = x / tileSize;
        y = levelHeight - y / tileSize;
        x = x + (width/(tileSize*2));
        y = y + (height/ (tileSize*2));
        return(new Vector2(x, y));
    }

    /**
     * Converts Tiled beat list String into an int[] value
     * @param beatListString the string representation of the beat list from Tiled
     * @return
     */
    private int[] convertTiledbeatList(String beatListString){
        int listLen = beatListString.length();
        if(listLen == 0){
            return defaultBeatList;
        }
        int[] result = new int[listLen];
        for (int i = 0; i < beatListString.length(); i++) {
            result[i] = Integer.parseInt(beatListString.substring(i, i+1));
        }
        return result;
    }

    /**
     * Create a checkpoint
     */
    private void createCheckpoint(Vector2 scale, float x, float y, Vector2 dimensions, int id, int levelHeight, int tileSize) {
        // Adjust and Convert coordinates to world coordinates
        Vector2 convertedCoord = convertTiledCoord(x, y, dimensions.x, dimensions.y, levelHeight, tileSize);

        if (id == 0) {
            // Set first checkpoint as spawn point
            firstCheckpoint[0] = convertedCoord.x;
            firstCheckpoint[1] = convertedCoord.y;
        }
        float cWidth  = dimensions.x/scale.x;
        float cHeight = dimensions.y/scale.y;

        JsonValue defaults = defaultConstants.get("defaults");
        Checkpoint obj = new Checkpoint(id, checkpointInactiveAnimation, checkpointActiveAnimation, checkpointRiseAnimation, convertedCoord.x, convertedCoord.y, cWidth, cHeight);
        obj.setBodyType(BodyDef.BodyType.StaticBody);
        obj.setDensity(defaults.getFloat("density", 0.0f));
        obj.setFriction(defaults.getFloat("friction", 1.0f));
        obj.setRestitution(defaults.getFloat("restitution", 0.0f));
        obj.setSensor(true);
        obj.setDrawScale(scale);
        obj.setTexture(checkpointTexture);
        GameController.getInstance().instantiate(obj);
        checkpoints.add(obj);
    }

    /**
     * Sets the checkpoint with num = 0 as the spawn.
     *
     * @param scale Vector 2 scale used to draw
     */
    public void setFirstCheckpointAsSpawn(Vector2 scale) {
        GameController.getInstance().setSpawn(new Vector2(firstCheckpoint[0], firstCheckpoint[1]));
    }

    /**
     * Create wall tiles
     *
     * @param scale Scale to draw
     * @param x     x coordinate (world coordinates) of tile
     * @param y     y coordinate (world coordinates) of tile
     */
    private void createWall(Vector2 scale, float x, float y, int tileId, int tileSize, String tilesetSource){
        //  Set texture
        TextureRegion textureRegion = null;
        if (tilesetSource.contains("rabbeatTileset")){
            textureRegion = rabbeatTileset.get(tileId);
        } else if (tilesetSource.contains("walls")){
            textureRegion = wallsTileset.get(tileId);
        }

        String wname = "wall";
        JsonValue defaults = defaultConstants.get("defaults");
        BoxGameObject obj;
        float dwidth  = textureRegion.getRegionWidth()/scale.x;
        float dheight = textureRegion.getRegionHeight()/scale.y;

        //Adjust coordinate to be center of tile
        float convertedX = x + ((float) textureRegion.getRegionWidth()/(tileSize*2));
        float convertedY = y + ((float) textureRegion.getRegionHeight()/(tileSize*2));

        obj = new BoxGameObject(convertedX, convertedY, dwidth, dheight);
        obj.setBodyType(BodyDef.BodyType.StaticBody);
        obj.setDensity(defaults.getFloat("density", 0.0f));
        obj.setFriction(defaults.getFloat("friction", 0.0f));
        obj.setRestitution(defaults.getFloat("restitution", 0.0f));
        obj.setDrawScale(scale);
        obj.setTexture(textureRegion);
        obj.setName(wname);
        obj.setWall(true);
        GameController.getInstance().instantiate(obj);
    }

    /**
     * Class for Tileset objects with the tileset's firstGID and tilesetSource.
     */
    static class Tileset {
        public int firstGID;
        public String tilesetSource;
        public Tileset(int firstGID, String tilesetSource) {
            this.firstGID = firstGID;
            this.tilesetSource = tilesetSource;
        }
    }

    /**
     * Takes in the GID of a tile and returns the info of the tileset that the tile is in.
     * @param gid The GID of the tile.
     * @return The Pair object with firstGID and tilesetName of the tileset that the tile is in.
     */
    private Tileset getTileset(int gid){
        Tileset tileset = new Tileset(0, "");
        for (JsonValue t : levelJson.get("tilesets")){
            if (gid < t.getInt("firstgid")){
                break;
            } else{
                tileset.firstGID = t.getInt("firstgid");
                tileset.tilesetSource = t.getString("source");
            }
        }
        return tileset;
    }

    /**
     * Create a platform.
     *
     * @param scale       The Vector2 draw scale
     * @param align       A string used to determine the alignment (left, mid,
     *                    right)
     * @param x           x coordinate (pixels) for the platform
     * @param y           y coordinate (pixels) for the platform
     * @param levelHeight Height of level in number of tiles
     * @param tileSize    Height of tile in pixels
     */
    private void createPlatform(Vector2 scale, String align, float x, float y, Vector2 dimensions, int levelHeight, int tileSize, boolean lethal){
        TextureRegion textureRegion;
        switch (align) {
            case "left":
                textureRegion = longLeft;
                break;
            case "right":
                textureRegion = longRight;
                break;
            case "mid":
                textureRegion = longMid;
                break;
            case "leftSquare":
                textureRegion = longLeftSquare;
                break;
            case "rightSquare":
                textureRegion = longRightSquare;
                break;
            case "single":
                textureRegion = longSingle;
                break;
            default:
                textureRegion = platformTile;
        }
        if (lethal){
            if (align.equals("vertical") || align.equals("middle")){
                textureRegion = laserMiddle;
            }
            else if (align.equals("top")){
                textureRegion = laserTop;
            }
            else if (align.equals("bottom")){
                textureRegion = laserBottom;
            }
            else if (align.equals("left")){
                textureRegion = laserLeft;
            }
            else if (align.equals("right")){
                textureRegion = laserRight;
            }
            else if (align.equals("horizontal")){
                textureRegion = laserHorizontal;
            }
            else{
                textureRegion = laserTile;
            }
        }
        //  Convert coordinates to world coordinates
        Vector2 convertedCoord = convertTiledCoord(x, y, dimensions.x, dimensions.y, levelHeight, tileSize);
        convertedCoord.set(convertedCoord.x, convertedCoord.y);

        JsonValue defaults = defaultConstants.get("defaults");
        float dwidth = textureRegion.getRegionWidth() / scale.x;
        float dheight = textureRegion.getRegionHeight() / scale.y;
        BoxGameObject platform;
        platform = new BoxGameObject(convertedCoord.x, convertedCoord.y, dwidth, dheight);
        platform.setBodyType(BodyDef.BodyType.StaticBody);
        platform.setDensity(defaults.getFloat("density", 0.0f));
        platform.setFriction(defaults.getFloat("friction", 0.0f));
        platform.setRestitution(defaults.getFloat("restitution", 0.0f));
        platform.setDrawScale(scale);
        platform.setTexture(textureRegion);
        if (lethal){
            platform.setType(Type.LETHAL);
        }
        else{
            platform.setType(Type.NONE);
        }
        GameController.getInstance().instantiate(platform);
    }

    /**
     * Create platform art which is not interact-able/collide-able with players.
     *
     * @param scale       The Vector2 draw scale
     * @param type        A string used to determine the texture, either "default",
     *                    or "radio"
     * @param x           x coordinate (pixels) for the platform art
     * @param y           y coordinate (pixels) for the platform art
     * @param levelHeight Height of level in number of tiles
     * @param tileSize    Height of tile in pixels
     */
    private void createPlatformArt(Vector2 scale, String type, float x, float y, Vector2 dimensions, int levelHeight, int tileSize){
        TextureRegion textureRegion;
        switch (type) {
            default:
                textureRegion = platformTileArt;
                break;
            case "radio":
                textureRegion = platformTileArt;
                break;
        }
        //  Convert coordinates to world coordinates
        Vector2 convertedCoord = convertTiledCoord(x, y, dimensions.x, dimensions.y, levelHeight, tileSize);
        convertedCoord.set(convertedCoord.x, convertedCoord.y);

        ArtObject platformArt = new ArtObject(textureRegion, convertedCoord.x, convertedCoord.y);
        platformArt.setBodyType(BodyDef.BodyType.StaticBody);
        platformArt.setDrawScale(scale);
        GameController.getInstance().instantiate(platformArt);
    }

    /**
     * Create a weighted platform.
     *
     * @param scale       The Vector2 draw scale
     * @param synthCoord  A float array which holds the weighted platform's x and y
     *                    coordinates in synth mode
     * @param jazzCoord   A float array which holds the weighted platform's x and y
     *                    coordinates in jazz mode
     * @param levelHeight Height of level in number of tiles
     * @param tileSize    Height of tile in pixels
     */
    private void createWeightedPlatform(Vector2 scale, float[] synthCoord,
            float[] jazzCoord, int platformIntervals, int waitTime, int moveTime, Vector2 dimensions,
            int levelHeight, int tileSize, Genre genre){
        //  Adjust coordinates + Convert coordinates to world coordinates
//        synthCoord[1] -= weightedSynth.getRegionHeight()/2-4;
        Vector2 convertedSynthCoord = convertTiledCoord(synthCoord[0], synthCoord[1], dimensions.x, dimensions.y, levelHeight, tileSize);
        convertedSynthCoord.set(convertedSynthCoord.x, convertedSynthCoord.y);
//        jazzCoord[1] -= weightedSynth.getRegionHeight()/2-4;
        Vector2 convertedJazzCoord = convertTiledCoord(jazzCoord[0], jazzCoord[1], dimensions.x, dimensions.y, levelHeight, tileSize);
        convertedJazzCoord.set(convertedJazzCoord.x, convertedJazzCoord.y);

        JsonValue defaults = defaultConstants.get("defaults");
        float dwidth = weightedSynth.getRegionWidth() / scale.x;
        float dheight = weightedSynth.getRegionHeight() / scale.y;
        WeightedPlatform weightedPlatform;
        weightedPlatform = new WeightedPlatform(dwidth, dheight,
                new float[] { convertedSynthCoord.x, convertedSynthCoord.y },
                new float[] { convertedJazzCoord.x, convertedJazzCoord.y },
                platformIntervals, waitTime, moveTime,
                weightedSynth, weightedJazz, genre);
        weightedPlatform.setBodyType(BodyDef.BodyType.StaticBody);
        weightedPlatform.setDensity(defaults.getFloat("density", 0.0f));
        weightedPlatform.setFriction(defaults.getFloat("friction", 0.0f));
        weightedPlatform.setRestitution(defaults.getFloat("restitution", 0.0f));
        weightedPlatform.setDrawScale(scale);
        GameController.getInstance().instantiate(weightedPlatform);
    }

    private void createMovingPlatform(Vector2 scale, Vector2[] positionNodes, int waitTime, int beatMoveTime, Vector2 dimensions, int levelHeight, int tileSize){
        //  Convert coordinates to world coordinates
        Vector2[] convertedPos = new Vector2[positionNodes.length];
        for(int i=0; i<positionNodes.length; i++){
            convertedPos[i] = convertTiledCoord(positionNodes[i].x, positionNodes[i].y, dimensions.x, dimensions.y, levelHeight, tileSize);
        }

        JsonValue defaults = defaultConstants.get("defaults");
        float dwidth = movingSynth.getRegionWidth() / scale.x;
        float dheight = movingSynth.getRegionHeight() / scale.y;
        MovingPlatform movingPlatform;
        movingPlatform = new MovingPlatform(dwidth, dheight, convertedPos, waitTime, beatMoveTime, platformTile);
        movingPlatform.setBodyType(BodyDef.BodyType.StaticBody);
        movingPlatform.setDensity(defaults.getFloat("density", 0.0f));
        movingPlatform.setFriction(defaults.getFloat("friction", 0.0f));
        movingPlatform.setRestitution(defaults.getFloat("restitution", 0.0f));
        movingPlatform.setDrawScale(scale);
        GameController.getInstance().instantiate(movingPlatform);
    }

    /**
     * Create the player object.
     *
     * @param scale       The Vector2 draw scale
     * @param startX      The player's starting x coordinate (pixels)
     * @param startY      The player's starting y coordinate (pixels)
     * @param levelHeight Height of level in number of tiles
     * @param tileSize    Height of tile in pixels
     */
    private void createPlayer(Vector2 scale, float startX, float startY, Vector2 dimensions, int levelHeight, int tileSize, Genre genre){
        //  Convert coordinates to world coordinate
        Vector2 convertedCoord = convertTiledCoord(startX, startY, dimensions.x, dimensions.y, levelHeight, tileSize);

        // TODO: Figure out if having 2 references for player fields is okay
        float dwidth =synthDefaultTexture.getRegionWidth() / scale.x;
        float dheight = synthDefaultTexture.getRegionHeight() / scale.y;
        player = new Player(defaultConstants.get("player"), convertedCoord.x, convertedCoord.y,
                dwidth * playerScale - .3f, dheight * playerScale, playerScale, genre);
        player.setDrawScale(scale);
        player.setPlayer();

        // Set animations: Synth
        player.synthIdleAnimation = synthIdleAnimation;
        player.synthWalkAnimation = synthWalkAnimation;
        player.synthJumpAnimation = synthJumpAnimation;
        player.synthFallAnimation = synthFallAnimation;
        player.synthDeathAnimation = synthDeathAnimation;
        // Set animations: Jazz
        player.jazzIdleAnimation = jazzIdleAnimation;
        player.jazzWalkAnimation = jazzWalkAnimation;
        player.jazzJumpAnimation = jazzJumpAnimation;
        player.jazzFallAnimation = jazzFallAnimation;
        player.jazzDeathAnimation = jazzDeathAnimation;

        player.setAnimation(synthWalkAnimation);
        player.synthSpeed = synthSpeed;
        player.jazzSpeed = jazzSpeed;
        player.setTexture(synthDefaultTexture);
        GameController.getInstance().instantiate(player);
    }

    private void createGoal(Vector2 scale, float x, float y, Vector2 dimensions, int levelHeight, int tileSize){
        //  Convert coordinates to world coordinate
        Vector2 convertedCoord = convertTiledCoord(x, y, dimensions.x, dimensions.y, levelHeight, tileSize);

        float dwidth = goalTile.getRegionWidth() / scale.x;
        float dheight = goalTile.getRegionHeight() / scale.y;

        JsonValue data = defaultConstants.get("goal");
        goalDoor = new BoxGameObject(convertedCoord.x, convertedCoord.y, dwidth, dheight);
        goalDoor.setBodyType(BodyDef.BodyType.StaticBody);
        goalDoor.setDensity(data.getFloat("density", 0));
        goalDoor.setFriction(data.getFloat("friction", 0));
        goalDoor.setRestitution(data.getFloat("restitution", 0));
        goalDoor.setSensor(true);
        goalDoor.setDrawScale(scale);
        goalDoor.setTexture(goalTile);
        goalDoor.setName("goal");
        GameController.getInstance().instantiate(goalDoor);
    }

    /**
     * Create a bear enemy.
     *
     * @param scale       The Vector2 draw scale
     * @param x           The bear's x coordinate (in pixels)
     * @param y           The bear's y coordinate (in pixels)
     * @param levelHeight Height of level in number of tiles
     * @param tileSize    Height of tile in pixels
     * @param beatList    The list of beats that the enemy reacts to
     */
    private void createEnemyBear(Vector2 scale, float x, float y, Vector2 dimensions, int levelHeight, int tileSize, int[] beatList, Genre genre){
        //  Convert coordinates to world coordinate
        Vector2 convertedCoord = convertTiledCoord(x, y, dimensions.x, dimensions.y, levelHeight, tileSize);

        float dwidth  = dimensions.x/scale.x;
        float dheight = dimensions.y/scale.y;
        BearEnemy bear = new BearEnemy(defaultConstants.get("bears"), convertedCoord.x, convertedCoord.y,
                dwidth*enemyScale, dheight*enemyScale, enemyScale, false, beatList, genre);
        bear.idleAnimation = bearIdleAnimation;
        bear.antiAnimation = bearAntiAnimation;
        bear.attackAnimation = bearAttackAnimation;
        bear.setAnimation(bearIdleAnimation);
        bear.setBodyType(BodyDef.BodyType.StaticBody);
        bear.setDrawScale(scale);
        bear.setTexture(bearTexture);
        GameController.getInstance().instantiate(bear);
    }

    /**
     * Create a beehive enemy which releases bees.
     *
     * @param scale       The Vector2 draw scale
     * @param x           The beehive's x coordinate (in pixels)
     * @param y           The beehive's y coordinate (in pixels)
     * @param levelHeight Height of level in number of tiles
     * @param tileSize    Height of tile in pixels
     * @param beatList    The list of beats that the enemy reacts to
     */
    private void createEnemyBeehive(Vector2 scale, float x, float y, Vector2 dimensions, int levelHeight, int tileSize, int[] beatList, boolean faceRight, float beet, Genre genre){
        //  Convert coordinates to world coordinate
        //TODO: change to beehive texture when we get art for this
        Vector2 convertedCoord = convertTiledCoord(x, y, dimensions.x, dimensions.y, levelHeight, tileSize);

        float dwidth  = dimensions.x/scale.x;
        float dheight = dimensions.y/scale.y;
        BeeHive beehive = new BeeHive(defaultConstants.get("beehives"), convertedCoord.x, convertedCoord.y,
                dwidth * enemyScale, dheight * enemyScale, enemyScale, faceRight, beatList, beet, genre);
        beehive.idleAnimation = beehiveIdleAnimation;
        beehive.beeAttackAnimation = beeAttackAnimation;
        beehive.setAnimation(beehiveIdleAnimation);
        beehive.setBodyType(BodyDef.BodyType.StaticBody);
        beehive.setDrawScale(scale);
        beehive.setTexture(beehiveTexture);
        GameController.getInstance().instantiate(beehive);
    }

    /**
     * Create a hedgehog enemy.
     *
     * @param scale           The Vector2 draw scale
     * @param x               The hedgehog's x coordinate (in pixels)
     * @param y               The hedgehog's y coordinate (in pixels)
     * @param rollingDistance The hedgehog's rollingDistance (in world coordinates)
     * @param levelHeight     Height of level in number of tiles
     * @param tileSize        Height of tile in pixels
     * @param beatList    The list of beats that the enemy reacts to
     */
    private void createEnemyHedgehog(Vector2 scale, float x, float y, Vector2 dimensions, int rollingDistance, int levelHeight, int tileSize, int[] beatList, Genre genre){
        //  Convert coordinates to world coordinate
        //TODO: change to hedgehog texture when we get art for this
        Vector2 convertedCoord = convertTiledCoord(x, y, dimensions.x, dimensions.y, levelHeight, tileSize);

        float dwidth  = enemyDefaultTexture.getRegionWidth()/scale.x;
        float dheight = enemyDefaultTexture.getRegionHeight()/scale.y;
        HedgehogEnemy hedgehog = new HedgehogEnemy(defaultConstants.get("hedgehogs"), convertedCoord.x, convertedCoord.y,
                rollingDistance, dwidth*enemyScale, dheight*enemyScale,
                enemyScale, false, beatList, genre);
        hedgehog.attackSynthAnimation = hedgehogAttackAnimation;
        hedgehog.setAnimation(hedgehogAttackAnimation);
        hedgehog.setBodyType(BodyDef.BodyType.StaticBody);
        hedgehog.setDrawScale(scale);
        hedgehog.setTexture(hedgehogTexture);
        GameController.getInstance().instantiate(hedgehog);
    }

    /**
     * Create a bat enemy.
     *
     * @param scale The Vector2 draw scale
     * @param x  The bear's x coordinate (in pixels)
     * @param y The bear's y coordinate (in pixels)
     * @param levelHeight Height of level in number of tiles
     * @param tileSize Height of tile in pixels
     */
    private void createEnemyBat(Vector2 scale, float x, float y, Vector2 dimensions, int levelHeight, int tileSize, int[] beatList, Genre genre){
        //  Convert coordinates to world coordinate
        Vector2 convertedCoord = convertTiledCoord(x, y, dimensions.x, dimensions.y, levelHeight, tileSize);

        float dwidth  = batTexture.getRegionWidth()/scale.x;
        float dheight = batTexture.getRegionHeight()/scale.y;
        BatEnemy bat = new BatEnemy(defaultConstants.get("bats"), convertedCoord.x, convertedCoord.y,
                dwidth*enemyScale, dheight*enemyScale,
                enemyScale, false, beatList, genre);
        bat.idleAnimation = batIdleAnimation;
        bat.antiAnimation = batAntiAnimation;
        bat.attackAnimation = batAttackAnimation;
        bat.setAnimation(batIdleAnimation);
        bat.setBodyType(BodyDef.BodyType.StaticBody);
        bat.setDrawScale(scale);
        bat.setTexture(batTexture);
        bat.echoAnimation = echoAnimation;
        GameController.getInstance().instantiate(bat);
    }

    private void createGroundArt(Vector2 scale, String type, float x, float y, Vector2 dimensions, int levelHeight, int tileSize, String groundLevel, JsonValue artJson){
        TextureRegion textureRegion = assets.get(type);
        if (textureRegion == null) {
            textureRegion = assets.get("light");
        }
        //  Adjust coordinates + Convert coordinates to world coordinates
        Vector2 convertedCoord = convertTiledCoord(x, y, dimensions.x, dimensions.y, levelHeight, tileSize);
        convertedCoord.set(convertedCoord.x, convertedCoord.y);

        switch (artJson.getString("type")){
            case "Pulse": {
                float pulsePerBeat = 0;
                float pulseScale = 0;
                float shrinkRate = 0;
                for (JsonValue prop : artJson.get("properties")) {
                    switch (prop.getString("name")) {
                        case "pulsePerBeat":
                            pulsePerBeat = prop.getFloat("value");
                            break;
                        case "pulseScale":
                            pulseScale = prop.getFloat("value");
                        case "shrinkRate":
                            shrinkRate = prop.getFloat("value");

                    }
                }
                PulsingArtObject pulseArt = new PulsingArtObject(textureRegion, convertedCoord.x,
                        convertedCoord.y,
                        pulsePerBeat, pulseScale, shrinkRate);
                pulseArt.setBodyType(BodyDef.BodyType.StaticBody);
                pulseArt.setDrawScale(scale);
                if (groundLevel.equals("foreground")) {
                    artObjects.add(pulseArt);
                }
                GameController.getInstance().instantiate(pulseArt);

                break;
            }
            case "Stretch": {
                float pulsePerBeat = 0;
                float horizontalGrowRate = 0;
                float verticalGrowRate = 0;
                for (JsonValue prop : artJson.get("properties")) {
                    switch (prop.getString("name")) {
                        case "pulsePerBeat": {
                            pulsePerBeat = prop.getFloat("value");
                            break;
                        }
                        case "verticalGrowRate": {
                            verticalGrowRate = prop.getFloat("value");
                            break;
                        }
                        case "horizontalGrowRate": {
                            horizontalGrowRate = prop.getFloat("value");
                            break;
                        }
                    }
                }
                StretchingArtObject stretchArt = new StretchingArtObject(textureRegion,
                        convertedCoord.x, convertedCoord.y,
                        pulsePerBeat, horizontalGrowRate, verticalGrowRate);
                stretchArt.setBodyType(BodyDef.BodyType.StaticBody);
                stretchArt.setDrawScale(scale);
                if (groundLevel.equals("foreground")) {
                    artObjects.add(stretchArt);
                }
                GameController.getInstance().instantiate(stretchArt);
                break;
            }
            default: {
                ArtObject art = new ArtObject(textureRegion, convertedCoord.x, convertedCoord.y);
                art.setBodyType(BodyDef.BodyType.StaticBody);
                art.setDrawScale(scale);
                if (groundLevel.equals("foreground")) {
                    artObjects.add(art);
                }
                GameController.getInstance().instantiate(art);
            }
        }
    }

    /**
     * Creates the in-game UI elements and adds them to the genre/synced objects.
     */
    private void createGUI(Genre genre) {
        genreIndicator = new GenreUI(synthIndicatorTexture, jazzIndicatorTexture, synthCDAnimation, jazzCDAnimation, genre);
        GameController.getInstance().instantiate(genreIndicator);
    }

    /** Returns the texture of the desired unlocked button number, represented by i */
    public Texture getUnlockedButtonTexture (int i) {
        switch(i) {
            case(1): return unlockedButton1;
            case(2): return unlockedButton2;
            case(3): return unlockedButton3;
            case(4): return unlockedButton4;
            case(5): return unlockedButton5;
            case(6): return unlockedButton6;
            case(7): return unlockedButton7;
            case(8): return unlockedButton8;
            case(9): return unlockedButton9;
            case(10): return unlockedButton10;
            case(11): return unlockedButton11;
            case(12): return unlockedButton12;
        }
        return null;
    }

    /** Returns the texture of the desired unlocked button number, represented by i */
    public Texture getLockedButtonTexture (int i) {
        switch(i) {
            case(1): return lockedButton1;
            case(2): return lockedButton2;
            case(3): return lockedButton3;
            case(4): return lockedButton4;
            case(5): return lockedButton5;
            case(6): return lockedButton6;
            case(7): return lockedButton7;
            case(8): return lockedButton8;
            case(9): return lockedButton9;
            case(10): return lockedButton10;
            case(11): return lockedButton11;
            case(12): return lockedButton12;
        }
        return null;
    }
}
